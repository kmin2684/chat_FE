{"version":3,"sources":["components/Friend.jsx","components/Chat.jsx","components/ChatPeopleList.jsx","icons/chat-fill.svg","icons/people-fill.svg","components/ChatPeopleToggle.jsx","vars.js","components/Login.jsx","components/Registration.jsx","icons/x-lg.svg","icons/info.svg","components/ChatWindow.jsx","components/NewChat3.jsx","components/NewChat.jsx","components/AddFriend.jsx","test_vars.js","icons/log-out.svg","icons/pencil-fill.svg","icons/person-plus-fill.svg","components/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["Friend","friend","onClickFriend","style","backgroundColor","StringToColor","className","onClick","Chat","room","setChatHistoryProp","chat","userInfo","history","useHistory","path","id","chatName","name","members","length","find","member","username","undefined","otherMembers","filter","slice","push","map","ChatPeopleList","showChat","friends","rooms","chats","ChatPeopleToggle","ChatPeopleSwitch","src","chat_fill","people_fill","http_url","Login","loggedIn","SetUserInfoProp","useState","setUsername","password","setPassword","isLoading","setIsLoading","spinner","role","onChange","event","type","target","value","VisitorSignIn","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","token","SaveUserInfo","non_field_errors","to","onSubmit","preventDefault","placeholder","Registration","password2","setPassword2","keys","Object","key","error","ChatWindow","setCurrentChatProp","chatHistory","inputOn","myID","socket","newChatData","mobileViewSide","chatTitle","room_id","useParams","content","setContent","scroll","useRef","disabled","setDisabled","useEffect","current","scrollTop","scrollHeight","MobileViewSide","Intl","DateTimeFormat","resolvedOptions","timeZone","messages","message","sender","datetime","time","xIcon","ref","e","trim","send","sendMessage","NewChat","width","section","setSection","setInputOn","checkedUsers","setCheckedUsers","new_message","add_participants","Checkbox","label","user","changeCheck","concat","add_title","checked","SetChatHistoryProp","location","useLocation","groupName","setGroupName","newChat","state","form","required","send_message","page","AddFriend","SetFriendsProp","query","setQuery","suggestions","setSuggestions","searchResult","suggestion","isFriend","new_suggestion","status","ok","URLSearchParams","room_list","users_id","last_message","Main","setUserInfoProp","profilePage","ProfileOn","a","catch","logoutIcon","profile","document","querySelector","display","personPlusIcon","pencilIcon","string","sum","charCodeAt","viewSide","show","hide","sideDisplayed","originalClassList","classList","split","uniqueClassList","Set","modifiedClassList","remove","add","sideHidden","Storage","localStorage","ChatUserInfo","App","setUserInfo","setChats","setFriends","currentChat","setCurrentChat","setSocket","setShowChat","setChatHistory","W3CWebSocket","ws_url","storedInfo","parse","Authorization","response_json","GetUserInfo","GeneralUpdate","windowDimensions","chat_id","pathname","authorization","onopen","onmessage","exact","displayedChat","GetChatTitle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.76d8336b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Friend.css'\r\nimport {StringToColor} from '../App'\r\n\r\nexport default function Friend ({friend, onClickFriend}) {\r\n    \r\n    const style = {backgroundColor: StringToColor(friend)}; \r\n    \r\n    return <>\r\n        <div className='friend' onClick = {() => onClickFriend(friend)}>\r\n            <div className='userIcon' style={style}>\r\n                {friend[0]}\r\n            </div>\r\n            {friend}\r\n        </div>\r\n    </>\r\n}\r\n\r\n","import React from \"react\";\r\n// import './Chat.css;'\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useParams,\r\n    useHistory,\r\n  } from \"react-router-dom\";\r\n\r\n  import {StringToColor} from '../App'\r\n\r\nexport default function Chat({room, setChatHistoryProp, chat, userInfo}) {\r\n    const history = useHistory();\r\n    const path = \"/room/\" + chat.id;\r\n    const chatName = chat.name? chat.name \r\n    : chat.members.length === 2 ? chat.members.find(member => member !== userInfo.username)\r\n    : undefined\r\n\r\n    let otherMembers = chat?.members.filter(member => member !== userInfo.username);\r\n    \r\n    if (otherMembers?.length > 1) otherMembers = otherMembers.slice(0, 2);\r\n \r\n\r\n    return <>\r\n      <div className='chat' onClick={()=>history.push(path)}>      \r\n        {otherMembers.length > 1 ? (\r\n          <div className = 'userIcon group'> \r\n          {otherMembers.map(member => <div className='userIcon small' style = {{backgroundColor: StringToColor(member)}}> {member[0]} </div>)}\r\n          </div>\r\n          )\r\n        : otherMembers.map(member => \r\n        <div className='userIcon' style = {{backgroundColor: StringToColor(member)}}> \r\n          {member[0]} \r\n        </div>)}\r\n        {chatName}\r\n      </div>\r\n    </>\r\n    // return <Link to={path}>\r\n    //     <div>Chat name: {chat.name}</div>\r\n    // </Link>;\r\n}","import React from \"react\";\r\n// import './ChatPeopleList.css'\r\nimport Friend from \"./Friend.jsx\"\r\nimport Chat from \"./Chat.jsx\"\r\n\r\n\r\n\r\nexport default function ChatPeopleList({showChat, setChatHistoryProp, rooms, friends, chats, onClickFriend, userInfo}) {\r\n   // chats = rooms.map(room => {\r\n   //    return <Chat content = {'chat-'+room.id} LoadChat = {LoadChat}/>\r\n   // });\r\n\r\n   if (showChat) {\r\n      if (chats) {\r\n         return chats.map(chat => {\r\n            return <Chat userInfo = {userInfo} chat = {chat} setChatHistoryProp = {setChatHistoryProp}/>\r\n         });     \r\n      } \r\n      return 'no chats';\r\n   } \r\n   \r\n   if (friends) {\r\n      return friends.map(friend => {\r\n         return <Friend friend = {friend} onClickFriend={onClickFriend}/>\r\n      })\r\n   }\r\n   return 'no friends';\r\n   \r\n\r\n   // return showChat?  \r\n   //    chats?.map(chat => {\r\n   //       return <Chat chat = {chat} setChatHistoryProp = {setChatHistoryProp}/>\r\n   //    })\r\n   //     : \r\n   //    friends.map(friend => {\r\n   //       return <Friend friend = {friend}/>\r\n   //    })\r\n\r\n   //     (\r\n   //    <>\r\n   //       <Friend />\r\n   //       <Friend />\r\n   //    </>\r\n   // )\r\n\r\n   // const friend_list = (\r\n   //    <>\r\n   //       <Friend />\r\n   //       <Friend />\r\n   //    </>\r\n   // )\r\n   ;\r\n\r\n   \r\n   // const chat_list = (\r\n   //    <>\r\n   //       <Chat content = {'c1'} LoadChat = {LoadChat}/>\r\n   //       <Chat content = {'c2'} LoadChat = {LoadChat}/>\r\n   //    </>\r\n   // );\r\n\r\n   // return showChat? chat_list : friend_list;\r\n}\r\n\r\n      // <> \r\n      //    <Chat content = {'c1'} LoadChat = {LoadChat}/>\r\n      //    <Chat content = {'c2'} LoadChat = {LoadChat}/>\r\n      // </>","export default __webpack_public_path__ + \"static/media/chat-fill.c06d5871.svg\";","export default __webpack_public_path__ + \"static/media/people-fill.1ec4cb9a.svg\";","import React from \"react\";\r\nimport './ChatPeopleToggle.css'; \r\nimport chat_fill from '../icons/chat-fill.svg'\r\nimport people_fill from '../icons/people-fill.svg'\r\n\r\nexport default function ChatPeopleToggle({ChatPeopleSwitch}) {\r\n\r\n    return <div className = 'ChatPeopleToggle'>\r\n        <div onClick={() => ChatPeopleSwitch(true)}>\r\n            <img className='chat_fill' src={chat_fill}/>\r\n            <div>Chat</div>\r\n        </div>\r\n        <div onClick={() => ChatPeopleSwitch(false)}>\r\n            <img className='people_fill' src={people_fill}/>\r\n            <div>People</div>\r\n        </div>\r\n    </div>;\r\n}","// const http_url = \"http://127.0.0.1:8000\";\r\n\r\n// const ws_url = \"ws://127.0.0.1:8000\";\r\n\r\nconst http_url = \"https://mk-chat-be.herokuapp.com\";\r\nconst ws_url = \"wss://mk-chat-be.herokuapp.com\";\r\n\r\nexport { http_url, ws_url };\r\n","import React, { useState, useEffect } from \"react\";\r\n// import './Chat.css;'\r\nimport {SaveUserInfo} from \"../App\";\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useParams,\r\n    Redirect,\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nimport { http_url, ws_url } from \"../vars\";\r\n\r\nexport default function Login({userInfo, loggedIn, SetUserInfoProp}) {\r\n    let history = useHistory();\r\n    const [username, setUsername] = useState(null);\r\n    const [password, setPassword] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const spinner =  <>\r\n        <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </>\r\n\r\n    \r\n    function onSubmit(event) {\r\n        event.preventDefault();\r\n        // let content = {id, pwd};\r\n        setIsLoading(true);\r\n        fetch( http_url + '/chat_app/api-token-auth/', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({username, password})\r\n        })\r\n        .then(response => {\r\n            setIsLoading(false);\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            console.log(data);\r\n            if (data?.token) {\r\n                SaveUserInfo({username: data.username, token: data.token});\r\n                SetUserInfoProp({username: data.username, token: data.token});\r\n            } else if (data?.non_field_errors) {\r\n                console.log('error message', data.non_field_errors);\r\n            }\r\n        });\r\n    }\r\n    \r\n    function onChange(event, type) {\r\n        if (type === \"username\")\r\n            setUsername(event.target.value);\r\n        else if (type === \"password\") \r\n            setPassword(event.target.value); \r\n    }\r\n\r\n    function VisitorSignIn(type) {\r\n        let username = undefined;\r\n        let password = undefined;\r\n        if (type=1) {\r\n            username = 'visitor1';\r\n            password = '123';\r\n        } else if  (type = 2) {\r\n            username = 'visitor2';\r\n            password = '123';\r\n        }\r\n        setIsLoading(true);\r\n        fetch( http_url + '/chat_app/api-token-auth/', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({username, password})\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            console.log(data);\r\n            setIsLoading(false);\r\n            if (data.token) {\r\n                SaveUserInfo({username: data.username, token: data.token});\r\n                SetUserInfoProp({username: data.username, token: data.token});\r\n            } else if (data.non_field_errors) {\r\n                console.log('error message', data.non_field_errors);\r\n            }\r\n        });\r\n    }\r\n\r\n    return  (loggedIn? <Redirect to='/' /> \r\n    :\r\n    <div className='login'>\r\n        <form onSubmit={onSubmit} className='login-form'>\r\n            <input type=\"text\" placeholder=\"id\" onChange={(event)=>onChange(event, 'username')} value={username} />\r\n            <input type=\"password\" placeholder=\"password\" onChange={(event)=>onChange(event, 'password')} value={password} />\r\n            <button type=\"submit\">log in</button>\r\n        </form>\r\n        <div>do not have an account yet?</div>\r\n        <div className='creat-new-account'><button onClick={()=>history.push('/register')}>Create a New Account</button></div>\r\n        <div>want to try the app without registering?</div>\r\n        <div className = 'visitor-sign-in'><button  onClick={() => VisitorSignIn(1)}>sign in as visitor1</button></div>\r\n        <div className = 'visitor-sign-in'><button  onClick={() => VisitorSignIn(2)}>sign in as visitor2</button></div>\r\n        {isLoading&&spinner}\r\n    </div>\r\n    );\r\n        // <form onSubmit={onSubmit}>\r\n        //     <input type=\"text\" placeholder=\"id\" onChange={(event)=>onChange(event, 'username')} value={username} />\r\n        //     <input type=\"password\" placeholder=\"password\" onChange={(event)=>onChange(event, 'password')} value={password} />\r\n        //     <button type=\"submit\">log in</button>\r\n        // </form>\r\n}\r\n\r\n\r\n\r\n// onSubmit\r\n//     prevent defualt action\r\n//     send id and password via post method\r\n//     if response is success\r\n//         redirect to main page \r\n//     else display error message to the user ","import React, { useState, useEffect } from \"react\";\r\n// import './Chat.css;'\r\nimport {SaveUserInfo} from \"../App\";\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useParams,\r\n    Redirect,\r\n    useHistory\r\n  } from \"react-router-dom\";\r\n\r\nimport { http_url, ws_url } from \"../vars\";\r\n\r\nexport default function Registration({userInfo, loggedIn, SetUserInfoProp}) {\r\n    let history = useHistory();\r\n       \r\n    const [username, setUsername] = useState(null);\r\n    const [password, setPassword] = useState(null);\r\n    const [password2, setPassword2] = useState(null);\r\n    \r\n    function onSubmit(event) {\r\n        event.preventDefault();\r\n        // let content = {id, pwd};\r\n        fetch( http_url + '/chat_app/registration', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({username, password, password2})\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            console.log(data);\r\n            let keys = Object.keys(data)\r\n            if (keys.find(key => key === \"token\")) {\r\n                SaveUserInfo({username: data.username, token: data.token});\r\n                SetUserInfoProp({username: data.username, token: data.token});\r\n            } else if (keys.find(key => key === \"error\")) {\r\n                console.log('error message', data.error);\r\n            }\r\n        });\r\n    }\r\n    \r\n    function onChange(event, type) {\r\n        if (type === \"username\")\r\n            setUsername(event.target.value);\r\n        else if (type === \"password\") \r\n            setPassword(event.target.value); \r\n        else if (type == \"password2\")\r\n            setPassword2(event.target.value); \r\n    }\r\n\r\n    if (loggedIn) return <Redirect to='/' />\r\n\r\n    return <>\r\n    <div className = \"registration\">\r\n        <form onSubmit={onSubmit}>\r\n            <input type=\"text\" placeholder=\"id\" onChange={(event)=>onChange(event, 'username')} value={username} />\r\n            <input type=\"password\" placeholder=\"password\" onChange={(event)=>onChange(event, 'password')} value={password} />\r\n            <input type=\"password\" placeholder=\"retype password\" onChange={(event)=>onChange(event, 'password2')} value={password2} />\r\n            <button type=\"submit\">register</button>\r\n        </form> \r\n    <div>Already registered? <button onClick={()=>history.push('/login')}>Go to sign in page</button></div>  \r\n    </div>\r\n    </>;\r\n}\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/x-lg.db763ca8.svg\";","export default __webpack_public_path__ + \"static/media/info.f4a46c68.svg\";","import React, { useState, useEffect, useRef } from \"react\";\r\n// import './Chat.css;'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useParams,\r\n    useHistory,\r\n  } from \"react-router-dom\";\r\nimport TimeAgo from 'timeago-react';\r\nimport xIcon from \"../icons/x-lg.svg\";\r\nimport infoIcon from \"../icons/info.svg\";\r\nimport { MobileViewSide } from \"../App\";\r\nimport { http_url, ws_url } from \"../vars\";\r\n\r\nfunction convertTZ(date, tzString) {\r\n    return new Date(\r\n        (typeof date === \"string\" ? new Date(date) : date).toLocaleString(\"en-US\", {\r\n        timeZone: tzString,\r\n        })\r\n    );\r\n}\r\n\r\n\r\nexport default function ChatWindow({setCurrentChatProp, chatHistory, myID, inputOn, userInfo, socket, newChatData, mobileViewSide, chatTitle}) {\r\n    const { room_id } = useParams();\r\n    const history = useHistory();\r\n    const [content, setContent] = useState('');\r\n    const scroll = useRef(null);\r\n    const [disabled, setDisabled] = useState(false);\r\n    useEffect(()=> {\r\n        scroll.current.scrollTop = scroll.current.scrollHeight;\r\n    },[chatHistory])\r\n\r\n    useEffect(() => {\r\n        if (mobileViewSide) MobileViewSide(mobileViewSide);}\r\n        ,\r\n        [mobileViewSide]\r\n        );  \r\n\r\n    if (room_id) setCurrentChatProp(room_id)\r\n    else setCurrentChatProp(undefined)\r\n\r\n    function sendMessage(e) {\r\n        e.preventDefault();\r\n        if(socket && room_id && content.trim().length) {\r\n            if(typeof socket === 'object'){\r\n                socket.send(JSON.stringify({message: content, room_id}))   \r\n            }\r\n        } else if(socket && newChatData && content.trim().length) {\r\n            console.log(\"new chat sent: \", {...newChatData, message: content});\r\n            socket.send(JSON.stringify({...newChatData, message: content})); \r\n            setDisabled(false);        \r\n        }\r\n        setContent('');\r\n    }\r\n    // const newChatData = {\r\n    //     newChat: true,\r\n    //     groupName,\r\n    //     members: checkedUsers,\r\n    //   };\r\n\r\n    function onSubmit(e) {\r\n        e.preventDefault();\r\n        if (content.trim().length) {\r\n            console.log(content);\r\n            fetch( http_url + '/chat_app/chat_update/' + room_id, {\r\n                method: 'POST',\r\n                headers: \r\n                    {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'token '+ userInfo.token, \r\n                    },\r\n                body: JSON.stringify({content}), \r\n            })\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n                console.log(data);\r\n                \r\n            }); \r\n        }\r\n        setContent('');\r\n    }\r\n\r\n    function onChange(e) {\r\n        setContent(e.target.value);\r\n    }\r\n\r\n    const localTZ = Intl.DateTimeFormat().resolvedOptions().timeZone; \r\n\r\n    const messages = chatHistory?.messages?.map(message => {\r\n        if (userInfo.username===message.sender) {\r\n            return (\r\n                <div className='message-block self'>\r\n                    <div className = 'container'>\r\n                        <div className='content'>\r\n                            {message.content}\r\n                        </div>\r\n                    </div>\r\n                    <div className='time'>\r\n                        {/* {convertTZ(message.time, localTZ).getHours()} */}\r\n                        <TimeAgo datetime={message.time}/>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className='message-block other'>\r\n                    <div className='sender'>\r\n                        {message.sender}\r\n                    </div>\r\n                    <div className='content'>\r\n                        {message.content}\r\n                    </div>\r\n                    <div className='time'>\r\n                        <TimeAgo datetime={message.time}/>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className = 'right'>\r\n            <div className = 'right-row1 chat-header'>\r\n                {/* {room_id} */}\r\n                \r\n                {/* {chatHistory?.messages && <div onClick={()=>history.push('/')}> home</div>} */}\r\n                \r\n                {newChatData && <div onClick={()=>history.push('/')}> home</div>}\r\n                \r\n                {chatHistory?.messages && <>\r\n                <div>\r\n                <div className='iconContainer' onClick={()=>history.push('/')}> \r\n                    <img src={xIcon} className='icon' />\r\n                </div>\r\n                    <div>\r\n                        {chatTitle}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    info\r\n                </div>\r\n                </>\r\n                }\r\n            </div>\r\n            <div className = 'right-row2' ref = {scroll}>\r\n                {messages?messages \r\n                : inputOn? 'send a new message'\r\n                : 'no message'}\r\n            </div>\r\n            <div className = 'right-row3'>\r\n                {\r\n                    (messages||inputOn)&& \r\n                    <form onSubmit = {e => sendMessage(e)}>\r\n                        <input disabled={disabled} type='text' placeholder='Aa' value={content} onChange={e => onChange(e)}/>\r\n                    </form>            \r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect, Component } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useParams\r\n} from \"react-router-dom\";\r\nimport ChatWindow from \"./ChatWindow\";\r\nimport { MobileViewSide } from \"../App\";\r\n\r\nexport default function NewChat ({chatHistory, myID, width, showChat, setChatHistoryProp, ChatPeopleSwitch, rooms, friends, setCurrentChatProp, onClickFriend}) {\r\n    const [section, setSection] = useState('new_message');\r\n    const [fullyLoaded, setFullyLoaded] = useState(false);\r\n    const [groupName, setGroupName] = useState(null);\r\n    const [inputOn, setInputOn] = useState(null);\r\n    function SwitchInputOn(value) {\r\n      setInputOn(value);\r\n    }\r\n  \r\n    // console.log('NewChat mounted');\r\n\r\n    function Change_section (current) {\r\n      if (current === 'new_message') {\r\n        setSection(new_message);\r\n        setInputOn(false);\r\n      } else if (current === 'add_participants') {\r\n        setSection(add_participants);\r\n        setInputOn(false);\r\n      } else if (current === 'add_title') {\r\n        setSection(add_title);\r\n        setInputOn(false);\r\n      } else if (current === 'send_message') {\r\n        setInputOn(true); \r\n      }\r\n    }\r\n  \r\n    useEffect(() => {\r\n      if (section === 'send_message') {\r\n        MobileViewSide('right');\r\n        return;\r\n      }\r\n      MobileViewSide('left');\r\n    }, [section]);\r\n\r\n    const [checkedUsers, setCheckedUsers] = useState([]);\r\n    function ChangeCheck(user) {\r\n      // let checkedUsersCopy = [...checkedUsers];\r\n      if (checkedUsers.find(e => e == user)) {\r\n        console.log(user, 'unchecking')\r\n        setCheckedUsers(checkedUsers.filter(e => e !== user));\r\n      } else {\r\n        console.log(user, 'checking')\r\n        setCheckedUsers(checkedUsers.concat([user]));\r\n      }\r\n    }\r\n    // function ChangeCheck(id) {\r\n    //   // let checkedUsersCopy = [...checkedUsers];\r\n    //   if (checkedUsers.find(user => user == id)) {\r\n    //     console.log(id, 'unchecking')\r\n    //     setCheckedUsers(checkedUsers.filter(user => user !== id));\r\n    //   } else {\r\n    //     console.log(id, 'checking')\r\n    //     setCheckedUsers(checkedUsers.concat([id]));\r\n    //   }\r\n    // }\r\n    const new_message = (\r\n      <div className='NewChat left'>\r\n        <div className='left-row1'>\r\n          <div>\r\n            New message\r\n          </div>\r\n          <div>\r\n            <button onClick={() => setSection('add_participants')}> Create a New Group </button>\r\n          </div>\r\n        </div>\r\n        <div className='left-row2'>\r\n          <div>\r\n            Suggested:\r\n          </div>\r\n          {friends?.map(friend => { return (\r\n            <div onClick = {()=>onClickFriend({friend})}>\r\n              {friend}\r\n            </div>\r\n          );})}\r\n  \r\n        </div>\r\n      </div>\r\n    );\r\n  \r\n    const add_participants = (\r\n      <div className='AddParticipants left'>\r\n        <div className='left-row1'>\r\n          <button onClick={() => setSection('new_message')}>\r\n            back\r\n          </button>\r\n            Add Participants\r\n          <button onClick={()=>setSection('add_title')}>\r\n            NEXT\r\n          </button>\r\n        </div>\r\n        <div className='left-row2'>\r\n          {friends?.map(friend => {\r\n            // const label = 'friend' + friend.id;\r\n            // const label = friend;\r\n            return (\r\n              <Checkbox label={friend} value={checkedUsers.find(user => user === friend)} changeCheck={() => ChangeCheck(friend)} />\r\n            );})}\r\n        </div>\r\n      </div>\r\n    )\r\n  \r\n    const add_title = (\r\n      <div className = 'AddTitle left'>\r\n        <div className='left-row1'>\r\n          <button onClick={()=>setSection('add_participants')}>back</button>\r\n          Add Title\r\n          <button onClick={()=>{setSection('send_message'); setInputOn(true)}}> CREATE</button>\r\n        </div>\r\n        <div className='left-row2'>\r\n          <input type='text' placeholder='Group Name (Required)'></input>\r\n        </div>\r\n      </div>\r\n    );\r\n    \r\n    // let page = null; \r\n  \r\n    // if (section === 'new_message') {\r\n    //   page = new_message;\r\n    // } else if (section === 'add_participants') {\r\n    //   page = add_participants;\r\n    // } else if (section === 'add_title') {\r\n    //   page = add_title;\r\n    // }\r\n    \r\n    const page = \r\n    section === 'new_message'? new_message\r\n    : section === 'add_participants'? add_participants\r\n    : section === 'add_title'? add_title\r\n    : section === 'send_message'? \r\n    //   <LeftWindow \r\n    //   width = {width} \r\n    //   showChat = {showChat} \r\n    //   LoadChat = {LoadChat} \r\n    //   ChatPeopleSwitch = {ChatPeopleSwitch}\r\n    //   rooms = {rooms}\r\n    //   friends = {friend_list}\r\n    //   />\r\n    <div className = 'NewChat left'> send a new message from the right window </div>\r\n    : null; \r\n  \r\n    return [page, <ChatWindow \r\n      chatHistory = {chatHistory} \r\n      setChatHistoryProp={setChatHistoryProp}\r\n      myID={myID} \r\n      inputOn={inputOn} \r\n      setCurrentChatProp={setCurrentChatProp}\r\n      // mess = {console.log('ChatWindow mounted')}\r\n      />]; \r\n \r\n  }\r\n  \r\n  function Checkbox ({label, value, changeCheck}) {\r\n    return (\r\n      <div className='group-participant'>\r\n        <label>\r\n          {label}\r\n          <input type='checkbox' checked={value} onChange={changeCheck} ></input>\r\n        </label>\r\n      </div> \r\n      );\r\n    }\r\n  ","import React, { useState, useEffect, Component } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useParams,\r\n  useHistory,\r\n  useLocation\r\n} from \"react-router-dom\";\r\nimport ChatWindow from \"./ChatWindow\";\r\nimport { MobileViewSide } from \"../App\";\r\n\r\nexport default function NewChat ({chatHistory, myID, width, showChat, setChatHistoryProp, ChatPeopleSwitch, rooms, friends, setCurrentChatProp, socket, onClickFriend, SetChatHistoryProp, mobileViewSide}) {\r\n  SetChatHistoryProp(undefined);\r\n  \r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [section, setSection] = useState('new_message');\r\n  const [fullyLoaded, setFullyLoaded] = useState(false);\r\n  const [groupName, setGroupName] = useState('');\r\n  const [inputOn, setInputOn] = useState(null);\r\n  const [checkedUsers, setCheckedUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (mobileViewSide) MobileViewSide(mobileViewSide);}\r\n    ,\r\n    [mobileViewSide]\r\n    );  \r\n\r\n  function SwitchInputOn(value) {\r\n    setInputOn(value);\r\n  }\r\n\r\n  function Change_section (current) {\r\n    if (current === 'new_message') {\r\n      setSection(new_message);\r\n      setInputOn(false);\r\n    } else if (current === 'add_participants') {\r\n      setSection(add_participants);\r\n      setInputOn(false);\r\n    } else if (current === 'add_title') {\r\n      setSection(add_title);\r\n      setInputOn(false);\r\n    } else if (current === 'send_message') {\r\n      setInputOn(true); \r\n    }\r\n  }\r\n  \r\n  function ChangeCheck(user) {\r\n    // let checkedUsersCopy = [...checkedUsers];\r\n    if (checkedUsers.find(e => e == user)) {\r\n      console.log(user, 'unchecking')\r\n      setCheckedUsers(checkedUsers.filter(e => e !== user));\r\n    } else {\r\n      console.log(user, 'checking')\r\n      setCheckedUsers(checkedUsers.concat([user]));\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    MobileViewSide('right');\r\n  },[section]);\r\n\r\n    // console.log('NewChat mounted');\r\n\r\n\r\n    // function ChangeCheck(id) {\r\n    //   // let checkedUsersCopy = [...checkedUsers];\r\n    //   if (checkedUsers.find(user => user == id)) {\r\n    //     console.log(id, 'unchecking')\r\n    //     setCheckedUsers(checkedUsers.filter(user => user !== id));\r\n    //   } else {\r\n    //     console.log(id, 'checking')\r\n    //     setCheckedUsers(checkedUsers.concat([id]));\r\n    //   }\r\n    // }\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault(); \r\n    if (!groupName.trim()) return\r\n    setSection('send_message'); \r\n    setInputOn(true);\r\n  }\r\n\r\n  const newChatData = {\r\n    newChat: true,\r\n    groupName,\r\n    members: checkedUsers,\r\n  };\r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    // if (location.state) {\r\n    //   console.log('location found');\r\n    //   setSection('send_message');\r\n    //   setCheckedUsers([location.state.user]);\r\n    //   setInputOn(true);\r\n    // }\r\n\r\n    if (location.state?.user) {\r\n      console.log('location found', location.state.user);\r\n      if (section !== 'send_message') setSection('send_message');\r\n      if (!inputOn) setInputOn(true);\r\n      if (checkedUsers.length < 2 && location.state.user !== checkedUsers[0]) \r\n      setCheckedUsers([location.state.user]);\r\n      setGroupName('');\r\n    }\r\n  }, [location]);  \r\n\r\n\r\n    // if (location.state?.user) {\r\n    //   console.log('location found');\r\n    //   if (section !== 'send_message') setSection('send_message');\r\n    //   if (!inputOn) setInputOn(true);\r\n    //   if ([location.state.user] !== checkedUsers) \r\n    //   setCheckedUsers([location.state.user]);\r\n    // }\r\n  \r\n\r\n\r\n  const new_message = (\r\n    <div className='NewChat right'>\r\n      <div className='right-row1'>\r\n        <div>\r\n          New message\r\n        </div>\r\n        <div>\r\n          <button onClick={() => setSection('add_participants')}> Create a New Group </button>\r\n          <button onClick={() => history.push('/')}>home</button>\r\n        </div>\r\n      </div>\r\n      <div className='right-row2'>\r\n        <div>\r\n          Suggested:\r\n        </div>\r\n        {friends?.map(friend => { return (\r\n          <div onClick={()=>onClickFriend(friend)}>\r\n            {friend}\r\n          </div>\r\n        );})}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const add_participants = (\r\n    <div className='AddParticipants right'>\r\n      <div className='right-row1'>\r\n        <button onClick={() => setSection('new_message')}>\r\n          back\r\n        </button>\r\n          Add Participants\r\n        <button onClick={()=>setSection('add_title')} disabled={checkedUsers.length < 2}>\r\n          NEXT\r\n        </button>\r\n      </div>\r\n      <div className='right-row2'>\r\n        {friends?.map(friend => {\r\n          // const label = 'friend' + friend.id;\r\n          // const label = friend;\r\n          return (\r\n            <Checkbox label={friend} value={checkedUsers.find(user => user === friend)} changeCheck={() => ChangeCheck(friend)} />\r\n          );})}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  const add_title = (\r\n    <div className = 'AddTitle right'>\r\n      <div className='right-row1'>\r\n        <button onClick={()=>setSection('add_participants')}>back</button>\r\n        Add Title\r\n        <button form='form1' disabled ={!groupName.trim()}> CREATE</button>\r\n      </div>\r\n      <div className='right-row2' onSubmit={(e)=>{onSubmit(e)}}>\r\n        <form id=\"form1\">\r\n          <input type='text' placeholder='Group Name (Required)' required=\"required\" value={groupName} onChange={e=>setGroupName(e.target.value)}></input>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n    \r\n  const send_message = <>\r\n    <ChatWindow \r\n    chatHistory = {chatHistory} \r\n    setChatHistoryProp={setChatHistoryProp}\r\n    myID={myID} \r\n    inputOn={inputOn} \r\n    setCurrentChatProp={setCurrentChatProp}\r\n    newChatData={newChatData}\r\n    socket={socket}\r\n    />\r\n  </>;\r\n\r\n    // let page = null; \r\n  \r\n    // if (section === 'new_message') {\r\n    //   page = new_message;\r\n    // } else if (section === 'add_participants') {\r\n    //   page = add_participants;\r\n    // } else if (section === 'add_title') {\r\n    //   page = add_title;\r\n    // }\r\n    \r\n  const page = \r\n  section === 'new_message'? new_message\r\n  : section === 'add_participants'? add_participants\r\n  : section === 'add_title'? add_title\r\n  : section === 'send_message'? send_message\r\n  : null; \r\n\r\n  if (location.state?.user && checkedUsers.length < 2 && location.state?.user !== checkedUsers[0] ) {\r\n    return <div className = 'right'></div>; \r\n  }\r\n\r\n\r\n  return page; \r\n  }\r\n  \r\n  function Checkbox ({label, value, changeCheck}) {\r\n    return (\r\n      <div className='group-participant'>\r\n        <label>\r\n          {label}\r\n          <input type='checkbox' checked={value} onChange={changeCheck} ></input>\r\n        </label>\r\n      </div> \r\n      );\r\n  }\r\n  ","import React, { useState, useEffect, Component } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useParams,\r\n  useHistory\r\n} from \"react-router-dom\";\r\nimport ChatWindow from \"./ChatWindow\";\r\nimport { MobileViewSide } from \"../App\";\r\nimport { http_url, ws_url } from \"../vars\";\r\n\r\nexport default function AddFriend ({userInfo, friends, SetFriendsProp, SetChatHistoryProp}) {\r\n    SetChatHistoryProp(undefined);\r\n    const [query, setQuery] = useState(undefined);\r\n    const [suggestions, setSuggestions] = useState(undefined);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        MobileViewSide('right');\r\n    }, [])\r\n\r\n    function onChange(e) {\r\n        setQuery(e.target.value);\r\n    }\r\n\r\n    function onSubmit(e) {\r\n        e.preventDefault();\r\n        fetch( http_url + '/chat_app/add_friend?' + new URLSearchParams({username: query}), {\r\n            method: 'GET',\r\n            headers: {'Content-Type': 'application/json', 'Authorization': 'token '+ userInfo.token,},\r\n        })\r\n        .then(response => {\r\n            if (response.ok) return response.json()\r\n            else return null\r\n        })\r\n        .then(data => {\r\n            console.log(data);\r\n            setSuggestions(data);\r\n        });\r\n    }\r\n\r\n    function onClick(e) {\r\n        let username = e.target.value;\r\n        let new_suggestion;\r\n        fetch( http_url + '/chat_app/add_friend', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json', 'Authorization': 'token '+ userInfo.token},\r\n            body: JSON.stringify({username})\r\n        })\r\n        .then(response => {console.log(response.status, response.ok); if (response.ok)response.json()})\r\n        .then(data => {\r\n            console.log(data);\r\n            new_suggestion = suggestions.map(suggestion => {\r\n                if (suggestion.username === username) return {username, isFriend: true}\r\n                return suggestion;\r\n            })\r\n            setSuggestions(new_suggestion);\r\n            SetFriendsProp([...friends, username]); \r\n        });\r\n    } \r\n \r\n\r\n    const searchResult = <div className=\"right-row2>\">\r\n        {suggestions?.map(suggestion => <>\r\n            <div>\r\n                {suggestion.username}\r\n                {suggestion.isFriend ? <span>added</span> \r\n                : <button onClick={e => onClick(e)} value={suggestion.username}> Add</button>}\r\n            </div>\r\n        </>\r\n        )}\r\n    </div>;\r\n\r\n    return <>\r\n    <div className=\"right\">\r\n        <div className=\"right-row1\">\r\n            <div>\r\n                <button onClick={() => history.push('/')}>Home</button>\r\n                Add friends\r\n            </div>\r\n            <form onSubmit={e => onSubmit(e)}>\r\n                <input type=\"text\" placeholder=\"search by username\" value={query} onChange = {e=>onChange(e)}/>\r\n            </form>\r\n        </div>\r\n        {searchResult}\r\n    </div>\r\n    </>;\r\n\r\n}","const room1 = {\r\n  id: \"1\",\r\n  members_id: [\"1\", \"2\"],\r\n  messages: [\r\n    { content: \"message1\", sender: \"2\", time: \"1min ago\" },\r\n    { content: \"message2\", sender: \"1\", time: \"now\" },\r\n  ],\r\n};\r\n\r\nconst room2 = {\r\n  id: \"2\",\r\n  members_id: [\"1\", \"3\"],\r\n  messages: [\r\n    { content: \"message3\", sender: \"1\", time: \"3min ago\" },\r\n    { content: \"message4\", sender: \"2\", time: \"1min ago\" },\r\n  ],\r\n};\r\n\r\nconst friend_list = [\r\n  { id: \"2\", username: \"user2\" },\r\n  { id: \"3\", username: \"user3\" },\r\n  { id: \"4\", username: \"user4\" },\r\n];\r\n\r\nconst room_list = [\r\n  {\r\n    id: \"1\",\r\n    users_id: [\"1\", \"2\"],\r\n    last_message: {\r\n      content: \"message2\",\r\n      sender: \"me\",\r\n      time: \"now\",\r\n    },\r\n  },\r\n  {\r\n    id: \"2\",\r\n    users_id: [\"1\", \"3\"],\r\n    last_message: {\r\n      content: \"message3\",\r\n      sender: \"joe\",\r\n      time: \"1min\",\r\n    },\r\n  },\r\n];\r\n\r\nconst userInfo2 = {\r\n  isLoggedIn: true,\r\n  username: \"wwer\",\r\n  token: \"sdpiofji\",\r\n};\r\n\r\nexport { room1, room2, friend_list, room_list, userInfo2 };\r\n","export default __webpack_public_path__ + \"static/media/log-out.a1f930e4.svg\";","export default __webpack_public_path__ + \"static/media/pencil-fill.8f9e674f.svg\";","export default __webpack_public_path__ + \"static/media/person-plus-fill.57f5c296.svg\";","import ChatPeopleList from \"./ChatPeopleList\";\r\nimport ChatPeopleToggle from \"./ChatPeopleToggle\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useParams,\r\n  userHistory,\r\n  useHistory,\r\n} from \"react-router-dom\";\r\nimport { MobileViewSide, SaveUserInfo } from \"../App\";\r\nimport {StringToColor} from '../App'\r\nimport { userInfo2 } from \"../test_vars\";\r\nimport logoutIcon from \"../icons/log-out.svg\";\r\nimport pencilIcon from \"../icons/pencil-fill.svg\";\r\nimport personPlusIcon from \"../icons/person-plus-fill.svg\";\r\nimport xIcon from \"../icons/x-lg.svg\";\r\nimport { http_url, ws_url } from \"../vars\";\r\n\r\nexport default function Main ({width, showChat, setChatHistoryProp, ChatPeopleSwitch, rooms, friends, mobileViewSide, chats, userInfo, setUserInfoProp, onClickFriend}) {\r\n  const history = useHistory();\r\n  \r\n  // useEffect(() => {\r\n  //   if (mobileViewSide) MobileViewSide(mobileViewSide);}\r\n  //   ,\r\n  //   [mobileViewSide]\r\n  //   );  \r\n\r\n  function logout(){\r\n    SaveUserInfo();\r\n    fetch(http_url + '/chat_app/logout', \r\n    {\r\n      headers: {\r\n        'authorization': \"token \" + userInfo.token,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log('logged out');\r\n      console.log(data);\r\n      setUserInfoProp(undefined);\r\n    }).catch(error => console.error(error));\r\n  }\r\n  // async function logout(){\r\n  //   let response = await fetch( http_url + '/chat_app/logout', \r\n  //   {\r\n  //     headers: {\r\n  //       'authorization': \"token \" + userInfo.token,\r\n  //       'Content-Type': 'application/json',\r\n  //     },\r\n  //   }); \r\n  //   let response_json = await response.json();\r\n  //   console.log(response_json);\r\n  // }\r\n\r\n  const profilePage = \r\n    <div className = 'profile-page'>\r\n      <div className = 'profile-header'>\r\n        <div className = 'profile-header-left'>\r\n          <div className='iconContainer' onClick={()=>ProfileOn(false)}>\r\n            <img src={xIcon} className='icon' />\r\n          </div>\r\n          <div>\r\n            Me\r\n          </div>\r\n        </div>\r\n        <div className='iconContainer' onClick={async () => await logout()}>\r\n          <img src={logoutIcon} className='icon' />\r\n        </div>\r\n      </div>\r\n      <div className='userIcon large'>\r\n        {userInfo.username[0]}\r\n      </div>\r\n      <div className = 'profile-username'>\r\n        {userInfo.username}\r\n      </div>\r\n\r\n    </ div>;\r\n  \r\n  function ProfileOn(state) {\r\n    let profile = document.querySelector('.profile-page');\r\n    if (state) profile.style.display = 'block';\r\n    else profile.style.display = 'none';\r\n  }\r\n\r\n\r\n  return (\r\n    <div className = 'left'>\r\n      {profilePage}\r\n      <div className='left-row1'>\r\n        <div className = \"Header\">\r\n          {/* width={width} */}\r\n          <div className = 'Header-left'>\r\n            <div className='userIcon' style={{backgroundColor: StringToColor(userInfo.username)}} onClick={()=>ProfileOn(true)}>\r\n                {userInfo.username[0]}\r\n            </div>\r\n            {showChat? 'Chats' : 'People'}\r\n            {/* <div className='ask'>\r\n              ask\r\n            </div> */}\r\n          </div>\r\n\r\n          <div className='buttons'>\r\n            \r\n            {/* <button onClick={()=>history.push('/addfriend')}>add a new friend</button>\r\n            <button onClick={()=>history.push('/newchat')}>\r\n              new chat\r\n            </button> */}\r\n            <div className='iconContainer' onClick={()=>history.push('/addfriend')}>\r\n              <img src={personPlusIcon} className='icon' />\r\n            </div>\r\n            <div className='iconContainer' onClick={()=>history.push('/newchat')}>\r\n              <img src={pencilIcon} className='icon' />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* <div>\r\n          Signed in as: {userInfo.username}\r\n          <div className='iconContainer'>\r\n            <img src={logoutIcon} className='icon' onClick={async () => await logout()}/>\r\n          </div>\r\n        </div> */}\r\n\r\n      </div>\r\n        <div className='left-row2'>\r\n          <ChatPeopleList userInfo = {userInfo} onClickFriend={onClickFriend} showChat={showChat} setChatHistoryProp={setChatHistoryProp} rooms={rooms} friends={friends} chats={chats}/> \r\n        </div>\r\n        <div className='left-row3'>\r\n          <ChatPeopleToggle ChatPeopleSwitch={ChatPeopleSwitch}/>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport ChatPeopleList from \"./components/ChatPeopleList\";\r\nimport ChatPeopleToggle from \"./components/ChatPeopleToggle\";\r\nimport Login from \"./components/Login\";\r\nimport Registration from \"./components/Registration\";\r\nimport NewChat3 from \"./components/NewChat3\";\r\nimport NewChat from \"./components/NewChat\";\r\nimport AddFriend from \"./components/AddFriend\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useParams,\r\n  Redirect,\r\n  useLocation,\r\n  useHistory,\r\n} from \"react-router-dom\";\r\nimport ChatWindow from \"./components/ChatWindow\";\r\nimport Main from \"./components/Main\";\r\nimport { room1, room2, friend_list, room_list, userInfo2 } from \"./test_vars\";\r\nimport { http_url, ws_url } from \"./vars\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\n\r\nfunction convertTZ(date, tzString) {\r\n  return new Date(\r\n    (typeof date === \"string\" ? new Date(date) : date).toLocaleString(\"en-US\", {\r\n      timeZone: tzString,\r\n    })\r\n  );\r\n}\r\n\r\nexport function StringToColor(string) {\r\n  let colorMap = {\r\n    0: \"#313E50\",\r\n    1: \"#924C5D\",\r\n    2: \"#C5867A\",\r\n    3: \"#E1915E\",\r\n    4: \"#E17F5E\",\r\n    5: \"#85A47A\",\r\n  };\r\n\r\n  let sum = 0;\r\n  for (let char of string) {\r\n    sum += char.charCodeAt(0);\r\n  }\r\n\r\n  return colorMap[sum % 6];\r\n}\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height,\r\n  };\r\n}\r\n\r\nasync function GetChat(id, token) {\r\n  let response = await fetch(http_url + \"/chat_app/chat_update/\" + id, {\r\n    headers: { authorization: \"token \" + token },\r\n  });\r\n  let response_json = await response.json();\r\n  return response_json;\r\n}\r\n\r\nexport function MobileViewSide(viewSide) {\r\n  let show;\r\n  let hide;\r\n  if (viewSide === \"left\") {\r\n    show = \"left\";\r\n    hide = \"right\";\r\n  } else if (viewSide === \"right\") {\r\n    show = \"right\";\r\n    hide = \"left\";\r\n  } else {\r\n    console.log(\"invalide viewSide for MobileViewSide function\");\r\n    return;\r\n  }\r\n  // add className of \"ShowIfMobile\" to the element that will be displayed\r\n  let sideDisplayed = document.querySelector(`.${show}`);\r\n  let originalClassList = sideDisplayed.classList.value\r\n    .split(/(\\s+)/)\r\n    .filter(function (e) {\r\n      return e.trim().length > 0;\r\n    });\r\n  let uniqueClassList = [...new Set(originalClassList)];\r\n  let modifiedClassList = uniqueClassList.filter(\r\n    (e) => !(e === \"HideIfMobile\" || e === \"ShowIfMobile\")\r\n  );\r\n  sideDisplayed.classList.remove(...originalClassList);\r\n  sideDisplayed.classList.add(...[...modifiedClassList, \"ShowIfMobile\"]);\r\n\r\n  // add className of \"HideIfMobile\" to the element that will be displayed\r\n  let sideHidden = document.querySelector(`.${hide}`);\r\n  if (!sideHidden) {\r\n    console.log(\"no side to hide\");\r\n    return;\r\n  }\r\n  console.log(\"side hidden\", sideHidden);\r\n  originalClassList = sideHidden?.classList?.value\r\n    ?.split(/(\\s+)/)\r\n    .filter(function (e) {\r\n      return e.trim().length > 0;\r\n    });\r\n  uniqueClassList = [...new Set(originalClassList)];\r\n  modifiedClassList = uniqueClassList.filter(\r\n    (e) => !(e === \"HideIfMobile\" || e === \"ShowIfMobile\")\r\n  );\r\n  sideHidden.classList.remove(...originalClassList);\r\n  sideHidden.classList.add(...[...modifiedClassList, \"HideIfMobile\"]);\r\n  return;\r\n}\r\n\r\nexport function SaveUserInfo(userInfo) {\r\n  if (typeof Storage !== \"undefined\") {\r\n    if (!userInfo) localStorage.ChatUserInfo = null;\r\n    else localStorage.ChatUserInfo = JSON.stringify(userInfo);\r\n    console.log(\"user info saved in local storage\");\r\n  } else {\r\n    console.log(\"unable to use localStorage\");\r\n  }\r\n}\r\n\r\nexport default function App() {\r\n  const history = useHistory();\r\n  // const [isLoading, setIsLoading] = useState(true);\r\n  const [myID, setMyID] = useState(\"1\");\r\n  const [userInfo, setUserInfo] = useState(\"loading\");\r\n  const [chats, setChats] = useState(undefined);\r\n  const [friends, setFriends] = useState(undefined);\r\n  const [currentChat, setCurrentChat] = useState(undefined);\r\n  const [socket, setSocket] = useState(undefined);\r\n\r\n  // switching between chat and friend list\r\n  const [showChat, setShowChat] = useState(true);\r\n\r\n  // displaying chat history\r\n  const [chatHistory, setChatHistory] = useState(undefined);\r\n\r\n  function setUserInfoProp(data) {\r\n    setUserInfo(data);\r\n  }\r\n\r\n  function SetFriendsProp(data) {\r\n    setFriends(data);\r\n  }\r\n\r\n  function SetUserInfoProp(data) {\r\n    setUserInfo(data);\r\n  }\r\n\r\n  function SetChatHistoryProp(data) {\r\n    setChatHistory(data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo && typeof userInfo === \"object\") {\r\n      console.log(\"typeof userInfo\", typeof userInfo);\r\n      if (Object.keys(userInfo).find((key) => key === \"token\")) {\r\n        setSocket(\r\n          new W3CWebSocket(ws_url + \"/ws/chat/?token=\" + userInfo.token)\r\n        );\r\n      }\r\n    }\r\n  }, [userInfo]);\r\n\r\n  useEffect(() => {\r\n    async function GetUserInfo() {\r\n      if (typeof Storage !== \"undefined\") {\r\n        if (localStorage.ChatUserInfo) {\r\n          try {\r\n            let storedInfo = JSON.parse(localStorage.ChatUserInfo);\r\n            console.log(\"storedInfo: \", storedInfo);\r\n            let response = await fetch(http_url + \"/chat_app/user_check\", {\r\n              method: \"GET\",\r\n              headers: { Authorization: \"token \" + storedInfo.token },\r\n            });\r\n            let response_json = await response.json();\r\n            if (response_json.username) {\r\n              SaveUserInfo({\r\n                username: response_json.username,\r\n                token: storedInfo.token,\r\n              });\r\n              setUserInfo({\r\n                username: response_json.username,\r\n                token: storedInfo.token,\r\n              });\r\n              return;\r\n            }\r\n          } catch (error) {\r\n            localStorage.ChatUserInfo = null;\r\n            console.error(error);\r\n          }\r\n        } else {\r\n          console.log(\"localStorage.ChatUserInfo is undefined\");\r\n          setUserInfo(null);\r\n        }\r\n      } else {\r\n        console.log(\"storage undefined\");\r\n      }\r\n      setUserInfo(null);\r\n    }\r\n\r\n    GetUserInfo();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function GeneralUpdate() {\r\n      // console.log(\"token is\", userInfo.token);\r\n      let token;\r\n      if (userInfo) token = Object.keys(userInfo)?.find((e) => e === \"token\");\r\n      else token = null;\r\n      // console.log(\"token: \", token);\r\n      if (token) {\r\n        let response = await fetch(http_url + \"/chat_app/general_update\", {\r\n          method: \"GET\",\r\n          headers: { Authorization: \"token \" + userInfo.token },\r\n        });\r\n        let data = await response.json();\r\n        console.log(\"\\n\\n\\n general update \\n\\n\\n\");\r\n        console.log(data);\r\n        setChats(data.rooms);\r\n        console.log(\"friends: \", data.friends, \"chats: \", data.rooms);\r\n\r\n        setFriends(data.friends);\r\n        // console.log(\"token used for general update:\", userInfo);\r\n      }\r\n    }\r\n\r\n    // console.log(\"general updating\", userInfo, userInfo.token);\r\n    GeneralUpdate();\r\n  }, [userInfo]);\r\n\r\n  // monitoring viewport width\r\n  const [windowDimensions, setWindowDimensions] = useState({ width: null });\r\n  const { width } = windowDimensions;\r\n  // useEffect(() => {\r\n  //   function handleResize() {\r\n  //     setWindowDimensions(getWindowDimensions());\r\n  //   }\r\n  //   window.addEventListener('resize', handleResize);\r\n  //   return () => {\r\n  //     window.removeEventListener('resize', handleResize);\r\n  //   };\r\n  // }, []\r\n  // );\r\n\r\n  function ChatPeopleSwitch(state) {\r\n    state ? setShowChat(true) : setShowChat(false);\r\n  }\r\n\r\n  function setCurrentChatProp(current) {\r\n    setCurrentChat(current);\r\n  }\r\n\r\n  function onClickFriend(user) {\r\n    let chat_id = chats?.find(\r\n      (chat) =>\r\n        chat.members.length === 2 &&\r\n        chat.members.find((member) => member === user)\r\n    )?.id;\r\n\r\n    if (chat_id) {\r\n      history.push(`/room/${chat_id}`);\r\n    } else {\r\n      console.log(\"redirect\", chat_id);\r\n\r\n      history.push({\r\n        pathname: \"/newchat\",\r\n        state: { user },\r\n      });\r\n    }\r\n  }\r\n\r\n  function GetChatTitle() {\r\n    let displayedChat;\r\n    if (!currentChat) return undefined;\r\n    displayedChat = chats?.find((chat) => chat.id == currentChat);\r\n\r\n    if (displayedChat?.name) return displayedChat.name;\r\n    else {\r\n      return displayedChat?.members?.find(\r\n        (member) => member !== userInfo.username\r\n      );\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let current;\r\n    if (currentChat && userInfo) {\r\n      if (Object.keys(userInfo).find((e) => e === \"token\")) {\r\n        fetch(http_url + \"/chat_app/chat_update/\" + currentChat, {\r\n          headers: { authorization: \"token \" + userInfo.token },\r\n        })\r\n          .then((response) => response.json())\r\n          .then((data) => setChatHistory(data));\r\n      }\r\n    } else setChatHistory(undefined);\r\n  }, [currentChat, userInfo]);\r\n\r\n  useEffect(() => {\r\n    let data;\r\n    if (socket && typeof socket === \"object\") {\r\n      console.log(socket);\r\n\r\n      socket.onopen = () => {\r\n        console.log(\"connected to websocket\");\r\n      };\r\n\r\n      socket.onmessage = (e) => {\r\n        console.log(\"onmessage via websocket\");\r\n        data = JSON.parse(e.data);\r\n        console.log(data);\r\n\r\n        if (Object.keys(data).find((key) => key === \"newChat\")) {\r\n          if (data.newChat && data.room) {\r\n            console.log(\"chats\", chats);\r\n            setChats([...chats, data.room]);\r\n            if (data.sender === userInfo.username)\r\n              history.push(`room/${data.room.id}`);\r\n          }\r\n        } else if (data.message.room_id == currentChat && chatHistory)\r\n          setChatHistory({\r\n            ...chatHistory,\r\n            messages: [...chatHistory.messages, data.message],\r\n          });\r\n      };\r\n    }\r\n  }, [socket, currentChat, chatHistory, chats]);\r\n\r\n  if (userInfo === \"loading\") {\r\n    return null;\r\n  } else if (!userInfo) {\r\n    return (\r\n      <>\r\n        <Route path=\"/login\">\r\n          <Login userInfo={null} SetUserInfoProp={SetUserInfoProp} />\r\n        </Route>\r\n        <Route path=\"/register\">\r\n          <Registration userInfo={null} SetUserInfoProp={SetUserInfoProp} />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Redirect to=\"/login\" />\r\n        </Route>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Main\r\n        width={width}\r\n        showChat={showChat}\r\n        setChatHistoryProp={undefined}\r\n        ChatPeopleSwitch={ChatPeopleSwitch}\r\n        rooms={room_list}\r\n        friends={friends}\r\n        mobileViewSide={\"left\"}\r\n        chats={chats}\r\n        userInfo={userInfo}\r\n        setUserInfoProp={setUserInfoProp}\r\n        onClickFriend={onClickFriend}\r\n      />\r\n      <Route exact path=\"/\">\r\n        {userInfo ? (\r\n          <>\r\n            {/* <Main\r\n              width={width}\r\n              showChat={showChat}\r\n              setChatHistoryProp={undefined}\r\n              ChatPeopleSwitch={ChatPeopleSwitch}\r\n              rooms={room_list}\r\n              friends={friends}\r\n              mobileViewSide={\"left\"}\r\n              chats={chats}\r\n              userInfo={userInfo}\r\n              setUserInfoProp={setUserInfoProp}\r\n              onClickFriend={onClickFriend}\r\n            /> */}\r\n            <ChatWindow\r\n              chatHistory={undefined}\r\n              // setChatHistoryProp={setChatHistoryProp}\r\n              myID={myID}\r\n              userInfo={userInfo}\r\n              setCurrentChatProp={setCurrentChatProp}\r\n              mobileViewSide={\"left\"}\r\n            />\r\n          </>\r\n        ) : (\r\n          <Redirect to=\"/login\" />\r\n        )}\r\n      </Route>\r\n      <Route path=\"/room/:room_id\">\r\n        {/* <Main\r\n          width={width}\r\n          showChat={showChat}\r\n          setChatHistoryProp={undefined}\r\n          ChatPeopleSwitch={ChatPeopleSwitch}\r\n          rooms={room_list}\r\n          friends={friends}\r\n          mobileViewSide={\"right\"}\r\n          chats={chats}\r\n          userInfo={userInfo}\r\n          setUserInfoProp={setUserInfoProp}\r\n          onClickFriend={onClickFriend}\r\n        /> */}\r\n        <ChatWindow\r\n          chatHistory={chatHistory}\r\n          chatTitle={GetChatTitle()}\r\n          setChatHistoryProp={undefined}\r\n          setCurrentChatProp={setCurrentChatProp}\r\n          myID={myID}\r\n          userInfo={userInfo}\r\n          socket={socket}\r\n          mobileViewSide={\"right\"}\r\n        />\r\n      </Route>\r\n      <Route path=\"/newchat\">\r\n        {/* <Main\r\n          width={width}\r\n          showChat={showChat}\r\n          setChatHistoryProp={undefined}\r\n          ChatPeopleSwitch={ChatPeopleSwitch}\r\n          rooms={room_list}\r\n          friends={friends}\r\n          mobileViewSide={\"right\"}\r\n          chats={chats}\r\n          userInfo={userInfo}\r\n          setUserInfoProp={setUserInfoProp}\r\n          onClickFriend={onClickFriend}\r\n        /> */}\r\n        <NewChat\r\n          // friends={friend_list}\r\n          // setChatHistoryProp={setChatHistoryProp}\r\n          width={width}\r\n          showChat={showChat}\r\n          ChatPeopleSwitch={ChatPeopleSwitch}\r\n          rooms={room_list}\r\n          friends={friends}\r\n          setCurrentChatProp={setCurrentChatProp}\r\n          socket={socket}\r\n          onClickFriend={onClickFriend}\r\n          SetChatHistoryProp={SetChatHistoryProp}\r\n          mobileViewSide={\"right\"}\r\n        />\r\n      </Route>\r\n      <Route path=\"/newchat2\">\r\n        <NewChat3\r\n          // friends={friend_list}\r\n          // setChatHistoryProp={setChatHistoryProp}\r\n          width={width}\r\n          showChat={showChat}\r\n          ChatPeopleSwitch={ChatPeopleSwitch}\r\n          rooms={room_list}\r\n          friends={friends}\r\n          setCurrentChatProp={setCurrentChatProp}\r\n        />\r\n      </Route>\r\n      <Route path=\"/addfriend\">\r\n        {/* <Main\r\n          width={width}\r\n          showChat={showChat}\r\n          setChatHistoryProp={undefined}\r\n          ChatPeopleSwitch={ChatPeopleSwitch}\r\n          rooms={room_list}\r\n          friends={friends}\r\n          mobileViewSide={\"right\"}\r\n          chats={chats}\r\n          userInfo={userInfo}\r\n          setUserInfoProp={setUserInfoProp}\r\n          onClickFriend={onClickFriend}\r\n        /> */}\r\n        <AddFriend\r\n          userInfo={userInfo}\r\n          friends={friends}\r\n          SetFriendsProp={SetFriendsProp}\r\n          SetChatHistoryProp={SetChatHistoryProp}\r\n          mobileViewSide={\"right\"}\r\n        />\r\n      </Route>\r\n      <Route path=\"/login\">\r\n        <Login userInfo={null} loggedIn={true} />\r\n      </Route>\r\n      <Route path=\"/register\">\r\n        <Registration userInfo={null} loggedIn={true} />\r\n      </Route>\r\n    </>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter as Router, Switch, HashRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <App />\r\n        </Switch>\r\n      </div>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}